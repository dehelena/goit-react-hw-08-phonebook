{"version":3,"file":"static/js/72.f7f332e7.chunk.js","mappings":"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","sources":["components/Filter/FilterStyled.js","components/Filter/Filter.jsx","components/ContactsList/ContactsStyled.js","redux/contacts/selectors.js","components/UpdateContact/UpdateContact.styled.js","components/UpdateContact/UpdateContact.jsx","components/ContactsList/ContactsList.jsx","components/FormAddContact/FormAddContact.styled.js","components/FormAddContact/FormAddContact.jsx","webpack://react-homework-template/./src/components/ContactsCounter/ContactsCounter.module.css?937e","components/ContactsCounter/ContactsCounter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FilterStyled = styled.div`\n  text-align: center;\n  color: #454545;\n\n  & input {\n    margin-top: 20px;\n    margin-left: 20px;\n    border: 2px solid #b9c4be;\n    border-radius: 2px;\n    height: 30px;\n  }\n`;\n","// import PropTypes from 'prop-types';\nimport { FilterStyled } from './FilterStyled';\nimport { filterContacts } from 'redux/contacts/FilterSlice';\nimport { useDispatch } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <FilterStyled>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          onChange={e => {\n            dispatch(filterContacts(e.target.value));\n          }}\n        />\n      </label>\n    </FilterStyled>\n  );\n};\n","import styled from 'styled-components';\nimport { IconButton } from '@mui/material';\n\nexport const ContactStyled = styled.ul`\n  margin-top: 30px;\n  text-align: center;\n  color: #454545;\n\n  & .contactItem {\n    margin-top: 10px;\n  }\n\n  & button {\n    margin-left: 20px;\n    min-width: 100px;\n    height: 40px;\n    font-size: 18px;\n    letter-spacing: 0.02em;\n    color: #000;\n    background-color: transparent;\n    border: 2px solid #47946a;\n    border-radius: 3px;\n    transition: background-color 250ms linear;\n  }\n\n  & button:hover {\n    color: #fff;\n    background-color: #47946a;\n  }\n`;\n\nexport const DeleteBtnStyled = styled(IconButton)`\n  margin-left: 20px;\n`;\n","// import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.IsLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredTerm = state => state.filter.value;\n\n//перерахунок буде відбуватись лише коли зміниться або контакти або значення фільтра\n//якщо в компоненті робити фільтрацію, тоді рендеритись буде постійно\n// export const selectFilteredContacts = createSelector(\n//   selectContacts,\n//   selectFilteredTerm,\n//   (contacts, filterTerm) => {\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(filterTerm.toLowerCase())\n//     );\n//   }\n// );\n","import styled from 'styled-components';\n\nexport const FormStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\n  & label {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n  }\n`;\n\nexport const BtnWrapperStyled = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin-top: 20px;\n\n  & button {\n    min-width: 200px;\n    height: 40px;\n    font-size: 18px;\n    letter-spacing: 0.02em;\n    color: #000;\n    background-color: transparent;\n    border: 2px solid #47946a;\n    border-radius: 3px;\n    transition: background-color 250ms linear;\n  }\n\n  & button:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { BtnWrapperStyled, FormStyled } from './UpdateContact.styled';\nimport { Button } from '@mui/material';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport default function UpdateContact({ id }) {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    const { name, number } = contacts.find(el => el.id === id);\n    setName(name);\n    setNumber(number);\n  }, [contacts, id]);\n\n  const handleUpdate = e => {\n    e.preventDefault();\n\n    const updatedContact = {\n      name,\n      number,\n      id,\n    };\n    dispatch(updateContact(updatedContact));\n    handleClose();\n  };\n\n  //   const handleChange = ({ target: { name, value } }) => {\n  //     switch (name) {\n  //         case 'name':\n  //             setName(value);\n  //             break;\n  //         case 'number':\n  //             setNumber(value);\n  //             break;\n  //       default:\n  //         break;\n  //     }\n  //   };\n\n  return (\n    <div>\n      <Button onClick={handleOpen}>Edit</Button>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            <b>Update contact</b>\n          </Typography>\n          <Typography\n            id=\"modal-modal-description\"\n            sx={{ mt: 2 }}\n            component=\"span\"\n          >\n            <form onSubmit={handleUpdate}>\n              <FormStyled>\n                <label className=\"label\">\n                  <span>Name</span>\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={e => setName(e.target.value)}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                  />\n                </label>\n                <label className=\"label\">\n                  <span>Number</span>\n                  <input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    value={number}\n                    onChange={e => setNumber(e.target.value)}\n                    required\n                  />\n                </label>\n              </FormStyled>\n              <BtnWrapperStyled>\n                <button\n                  type=\"submit\"\n                  size=\"md\"\n                  variant={'soft'}\n                  color=\"success\"\n                >\n                  Update\n                </button>\n                <button\n                  type=\"submit\"\n                  size=\"md\"\n                  variant={'soft'}\n                  color=\"success\"\n                  onClick={handleClose}\n                >\n                  Cancel\n                </button>\n              </BtnWrapperStyled>\n            </form>\n          </Typography>\n        </Box>\n      </Modal>\n    </div>\n  );\n}\n","import React from 'react';\nimport { ContactStyled } from './ContactsStyled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilteredTerm } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { IconButton, Tooltip } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport UpdateContact from 'components/UpdateContact/UpdateContact';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filterTerm = useSelector(selectFilteredTerm);\n  // const filteredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterTerm.toLowerCase())\n  );\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ContactStyled>\n      {filteredContacts.map(contact => {\n        return (\n          <li key={contact.id} className=\"contactItem\">\n            <span>{contact.name} </span>\n            <span> {contact.number} </span>\n            <UpdateContact id={contact.id} />\n            <Tooltip title=\"Delete\">\n              <IconButton\n                onClick={() => {\n                  onDeleteContact(contact.id);\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </li>\n        );\n      })}\n    </ContactStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledFormAddContacts = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 25px;\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 15px;\n  width: 400px;\n  border: 1px solid #454545;\n\n  & button {\n    align-self: center;\n    min-width: 200px;\n    height: 40px;\n    font-size: 18px;\n    letter-spacing: 0.02em;\n    color: #000;\n    background-color: transparent;\n    border: 2px solid #47946a;\n    border-radius: 3px;\n    transition: background-color 250ms linear;\n  }\n\n  & button:hover {\n    color: #fff;\n    background-color: #47946a;\n  }\n\n  & .label {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n\n  & input {\n    margin-top: 5px;\n    border: 2px solid #b9c4be;\n    border-radius: 2px;\n    height: 30px;\n  }\n`;\n","import React from 'react';\nimport { StyledFormAddContacts } from './FormAddContact.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const FormAddContact = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    const form = e.target;\n    e.preventDefault();\n\n    const contact = {\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    };\n\n    const isExist = contacts.some(el => el.name === contact.name);\n\n    if (isExist) {\n      alert(`${contact.name} is already in contact list.`);\n      return;\n    }\n    dispatch(addContact(contact));\n\n    form.reset();\n  };\n\n  return (\n    <StyledFormAddContacts onSubmit={handleSubmit}>\n      <label className=\"label\">\n        <span>Name</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className=\"label\">\n        <span>Number</span>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </StyledFormAddContacts>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"countsText\":\"ContactsCounter_countsText__6hfGt\"};","import { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport css from './ContactsCounter.module.css';\n\nexport const ContactsCounter = () => {\n  const contacts = useSelector(selectContacts);\n\n  const count = contacts.reduce(acc => {\n    return (acc += 1);\n  }, 0);\n\n  return (\n    <div>\n      <p className={css.countsText}>You have {count} contacts</p>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { FormAddContact } from 'components/FormAddContact/FormAddContact';\nimport { ContactsCounter } from 'components/ContactsCounter/ContactsCounter';\nimport Box from '@mui/material/Box';\nimport { Container } from '@mui/material';\n\nexport default function Contacts() {\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Box component=\"div\">\n        <Container maxWidth=\"sm\">\n          <div>{isLoading && 'Request in progress...'}</div>\n          <ContactsCounter />\n          <FormAddContact />\n          <Filter />\n          <ContactList />\n        </Container>\n      </Box>\n    </>\n  );\n}\n"],"names":["FilterStyled","styled","Filter","dispatch","useDispatch","type","name","onChange","e","filterContacts","target","value","ContactStyled","selectContacts","IconButton","state","contacts","items","selectIsLoading","IsLoading","selectFilteredTerm","filter","FormStyled","BtnWrapperStyled","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","UpdateContact","id","useState","open","setOpen","handleClose","setName","number","setNumber","useSelector","useEffect","find","el","Button","onClick","Modal","onClose","Box","sx","Typography","variant","component","mt","onSubmit","preventDefault","updatedContact","updateContact","className","pattern","title","required","size","color","ContactList","filterTerm","filteredContacts","contact","toLowerCase","includes","map","Tooltip","contactId","deleteContact","Delete","StyledFormAddContacts","FormAddContact","form","elements","some","alert","addContact","reset","ContactsCounter","count","reduce","acc","css","Contacts","isLoading","fetchContacts","Container","maxWidth"],"sourceRoot":""}